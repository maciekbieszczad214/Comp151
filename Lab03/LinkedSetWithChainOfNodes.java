package Lab03;/** * A class that implements the ADT set by using a chain of linked nodes. * The set is never full. * * @author YOUR NAME * @version 12/29/2016 */public class LinkedSetWithChainOfNodes<T extends Comparable<? super T>> implements SetInterface<T>{    private Node<T> firstNode;            // Head reference to first node    private int numberOfEntries;          // Number of entries in set    public LinkedSetWithChainOfNodes()    {        //TODO Project2    } // end default constructor    public final void clear()    {        //TODO Project2    } // end clear    public boolean add(T newEntry)    {        //TODO Project2        return false; //THIS IS A STUB    } // end add    /**     * Locates a given entry within this bag.     * Returns a reference to the node containing the entry, if located,     * or null otherwise.     *     * Utilized by removeElement method     */    private Node<T> getReferenceTo(T anEntry)    {        //TODO Project2        return null; //THIS IS A STUB    } // end getReferenceTo    public boolean removeElement(T anEntry)    {        //TODO Project2        return false; //THIS IS A STUB    } // end remove    public T remove()    {        //TODO Project2        return null; //THIS IS A STUB    } // end remove    public boolean contains(T anEntry)    {        //TODO Project2        return false; //THIS IS A STUB    } // end contains    public int getCurrentSize()    {        //TODO Project2        return 0; //THIS IS A STUB    } // end getCurrentSize    public boolean isEmpty()    {        //TODO Project2        return false; //THIS IS A STUB    } // end getLength    public T[] toArray()    {        //TODO Project2        return null; //THIS IS A STUB    } // end toArray    // Displays a set.    public void displaySet()    {        //TODO Project2    } // end displaySet    // A class of nodes for a chain of linked nodes.    private class Node<S>    {        private S data; // Data portion        private Node next; // Link to next node        private Node(S dataPortion)        {            this(dataPortion, null);        } // end constructor        private Node(S dataPortion, Node nextNode)        {            this.data = dataPortion;            this.next = nextNode;        } // end constructor    } // end Node} // end LinkedSetWithChainOfNodes