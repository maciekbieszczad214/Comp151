package Lab03;/** * A class that implements the ADT set by using a chain of linked nodes. * The set is never full. * * @author YOUR NAME * @version 12/29/2016 */public class LinkedSetWithChainOfNodes<T extends Comparable<? super T>> implements SetInterface<T>{    private Node<T> firstNode;            // Head reference to first node    private int numberOfEntries;          // Number of entries in set    public LinkedSetWithChainOfNodes()    {        //TODO Project2 done        this.firstNode = null;        this.numberOfEntries = 0;    } // end default constructor    public final void clear()    {        //TODO Project2 done        while (!isEmpty())            remove();    } // end clear    public boolean add(T newEntry)    {        //TODO Project2 done        boolean result = false;        if (!contains(newEntry)) {            // add to beginning of chain:            Node<T> newNode = new Node<>(newEntry);            newNode.next = this.firstNode;  // make new node reference rest of chain            // (firstNode is null if chain is empty)            this.firstNode = newNode;       // new node is at beginning of chain            this.numberOfEntries++;            result = true;        }        return result;    } // end add    /**     * Locates a given entry within this bag.     * Returns a reference to the node containing the entry, if located,     * or null otherwise.     *     * Utilized by removeElement method     */    private Node<T> getReferenceTo(T anEntry)    {        //TODO Project2 done        boolean found = false;        Node<T> currentNode = this.firstNode;        while (!found && (currentNode != null))        {            if (anEntry.equals(currentNode.data))                found = true;            else                currentNode = currentNode.next;        } // end while        return currentNode;    } // end getReferenceTo    public boolean removeElement(T anEntry)    {        //TODO Project2 done        boolean result = false;        Node<T> nodeN = getReferenceTo(anEntry);        if (nodeN != null)        {            nodeN.data = this.firstNode.data; // replace located entry with entry in first node            this.firstNode = this.firstNode.next; // remove first node from chain            this.numberOfEntries--;            result = true;        } // end if        return result;    } // end remove    public T remove()    {        //TODO Project2 done        T result = null;        if (this.firstNode != null)        {            result = this.firstNode.data;            this.firstNode = this.firstNode.next; // remove first node from chain            this.numberOfEntries--;        } // end if        return result;    } // end remove    public boolean contains(T anEntry)    {        //TODO Project2 done        return getReferenceTo(anEntry) != null;    } // end contains    public int getCurrentSize()    {        //TODO Project2 done        return this.numberOfEntries;    } // end getCurrentSize    public boolean isEmpty()    {        //TODO Project2 done        return this.numberOfEntries == 0;    } // end getLength    public T[] toArray()    {        //TODO Project2 done        // the cast is safe because the new array contains null entries        @SuppressWarnings("unchecked")        T[] result = (T[]) new Object[this.numberOfEntries]; // unchecked cast        int index = 0;        Node<T> currentNode = this.firstNode;        while ((index < this.numberOfEntries) && (currentNode != null))        {            result[index] = currentNode.data;            index++;            currentNode = currentNode.next;        } // end while        return result;    } // end toArray    // Displays a set.    public void displaySet()    {        //TODO Project2        if (this.numberOfEntries > 0)        {            System.out.print("There are " + this.numberOfEntries + " element(s): ");            Node<T> currentNode = this.firstNode;            while (currentNode != null)            {                System.out.print(currentNode.data + " ");                currentNode = currentNode.next;            }            System.out.println();        }        else            System.out.println("The bag is empty.");    } // end displaySet    // A class of nodes for a chain of linked nodes.    private class Node<S>    {        private S data; // Data portion        private Node next; // Link to next node        private Node(S dataPortion)        {            this(dataPortion, null);        } // end constructor        private Node(S dataPortion, Node nextNode)        {            this.data = dataPortion;            this.next = nextNode;        } // end constructor    } // end Node} // end LinkedSetWithChainOfNodes