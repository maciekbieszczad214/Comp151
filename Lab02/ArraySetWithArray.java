package Lab02;import java.util.Arrays;/** * A class that implements the ADT set by using a resizable array. * The array is never full. * * @author YOUR NAME * @version 12/28/2016 */public class ArraySetWithArray<T extends Comparable<? super T>> implements SetInterface<T>{    private T[] arrayOfSetEntries;    private int numberOfEntries;    private static final int DEFAULT_CAPACITY = 3; // Initial capacity of array    /**     * Creates an empty array whose initial capacity is 3.     */    public ArraySetWithArray()    {        //TODO Project2    } // end default constructor    /**     * Creates an empty array having a given initial capacity.     *     * @param capacity The integer capacity desired.     */    public ArraySetWithArray(int capacity)    {        //TODO Project2    } // end constructor    /**     * Creates an array containing given entries.     *     * @param contents An array of objects.     */    public ArraySetWithArray(T[] contents)    {        //TODO Project2    } // end constructor    /**     * Adds a new entry to this array, avoiding duplicates.     *     * @param newEntry The object to be added as a new entry.     * @return True if the addition is successful, or false if not.     */    public boolean add(T newEntry)    {        //TODO Project2        return false; //THIS IS A STUB    } // end add    // Doubles the size of the array if it is full.    private void ensureCapacity()    {        //TODO Project2    } // end ensureCapacity    /**     * Retrieves all entries that are in this array.     *     * @return A newly allocated array of all the entries.     */    public T[] toArray()    {        //TODO Project2        return null; //THIS IS A STUB    } // end toArray    /**     * Sees whether this array is empty.     *     * @return True if this array is empty, or false if not.     */    public boolean isEmpty()    {        //TODO Project2        return false;    } // end isEmpty    /**     * Gets the number of entries currently in this array.     *     * @return The integer number of entries currently in the array.     */    public int getCurrentSize()    {        //TODO Project2        return 0; //THIS IS A STUB    } // end getCurrentSize    /**     * Tests whether this array contains a given entry.     *     * @param anEntry The entry to locate.     * @return True if the array contains anEntry, or false if not.     */    public boolean contains(T anEntry)    {        //TODO Project2        return false; //THIS IS A STUB    } // end contains    /**     * Removes all entries from this array.     */    public void clear()    {        //TODO Project2    } // end clear    /**     * Removes one unspecified entry from this bag.     *     * @return Either the removed entry if the removal     * was successful, or null if not.     */    public T remove()    {        //TODO Project2        return null; //THIS IS A STUB    } // end remove    /**     * Removes one occurrence of a given entry from this array.     *     * @param anEntry The entry to be removed.     * @return True if the removal was successful, or null if not.     */    public boolean removeElement(T anEntry)    {        //TODO Project2        return false;    } // end removeElement    // Removes and returns the array entry at a given index.    // If no such entry exists, returns null.    private T removeEntry(int givenIndex)    {        //TODO Project2        return null; //THIS IS A STUB    } // end removeEntry    // Displays a set.    public void displaySet()    {        //TODO Project2    } // end displaySet} // end ArraySetWithArray